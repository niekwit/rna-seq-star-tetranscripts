import datetime
from scripts.resources import Resources
from scripts import general_functions as utils
from snakemake.utils import min_version, validate

# Set minimum snakemake version
min_version("8.25.5")

# Workflow version
VERSION = "v0.4.0"

# Load config file
configfile: "config/config.yaml"

# Wrapper version
wrapper_version = "v5.5.1"

logger.info(f"Workflow version: {VERSION}")
logger.info(f"Wrapper version: {wrapper_version}")

# Define Docker container for Apptainer usage
containerized: f"docker://niekwit/rna-seq-star-tetranscripts:{VERSION}"

# Load resources to be used in rules
genome = config["genome"]
resources = Resources(genome, config["ensembl_genome_build"])

# Get sample names
SAMPLES = utils.import_samples()
COMPARISONS = utils.comparisons()
CHROMOSOMES = utils.get_chromosomes(genome)

# Import rules
include: "rules/fastqc.smk"
include: "rules/trimming.smk"
include: "rules/resources.smk"
include: "rules/mapping.smk"
include: "rules/te_quantification.smk"
include: "rules/deseq2.smk"
include: "rules/plotting.smk"
include: "rules/bigwig.smk"

# Target rule
rule all:
    input: 
        "results/plots/mapping_rates.pdf",
        "results/plots/sample_distance.pdf",
        "results/plots/pca.pdf",
        expand("results/bigwig/{sample}.bw", sample=SAMPLES),
        expand("results/deseq2/{comparison}_{type}.csv", comparison=COMPARISONS, type=["genes", "te"]),
        expand("results/plots/te_classes/{comparison}.pdf", comparison=COMPARISONS)

# Save snakemake terminal output to log file
time = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
snake_log = f"logs/snakemake/{time}_snakemake.log"
os.makedirs("logs/snakemake", exist_ok=True)

onsuccess: 
    shell("cp -v {log} {snake_log}")
    print("Analysis finished successfully!")

onerror:
    shell("cp -v {log} {snake_log}")
    print(f"Analysis failed...\nCheck {snake_log} for details")
