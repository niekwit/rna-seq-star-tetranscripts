import os
from scripts.resources import Resources
from scripts import general_functions as gf
from snakemake.utils import min_version

# set minimum snakemake version
min_version("6.4.1")

# load config file
configfile: "config/config.yaml"

# load resources to be used in rules
resources = Resources(config["genome"], config["ensembl_genome_build"])

# get sample names
SAMPLES = gf.import_samples()

# set STAR parameters
ofmn = config["mapping"]["outFilterMultimapNmax"]
wamn = config["mapping"]["winAnchorMultimapNmax"]
extra_params = config["mapping"]["extra_params"]
star_extra = f"--outFilterMultimapNmax {ofmn} --winAnchorMultimapNmax {wamn} {extra_params}" 

# import rules
include: "rules/fastqc.smk"
include: "rules/trimming.smk"
include: "rules/resources.smk"
include: "rules/mapping.smk"
include: "rules/te_quantification.smk"
include: "rules/deseq2.smk"
include: "rules/plotting.smk"

# set local rules, i.e. rules that are not executed on a compute node
localrules: all, get_fasta, get_gtf, get_te_gtf, combined_gtf

# target rule
rule all:
    input: 
        "results/plots/mapping_rates.pdf",
        "results/deseq2/deseq2_genes.xlsx",
        "results/deseq2/deseq2_te.xlsx",
        "results/plots/pca.pdf",
        "results/plots/sample_distance.pdf",


# save snakemake terminal output to log file
snake_log = "logs/snakemake/snakemake.log"
os.makedirs("logs/snakemake", exist_ok=True)

onsuccess: 
    shell("cp -v {log} {snake_log}")
    shell("pigz {genome.fasta} {genome.gtf} {genome.tegtf}") # compress genome files
    print("Analysis finished successfully!")

onerror:
    shell("cp -v {log} {snake_log}")
    print("Analysis (partly) failed...\nCheck {snake_log} for details")



